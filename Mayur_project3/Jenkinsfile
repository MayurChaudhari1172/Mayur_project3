@Library('terraform-pipeline-lib') _  // optional: only if you use shared libs

def CONFIG_FILE = 'deployment-config.yaml'

pipeline {
    agent any

    environment {
        TF_VERSION = '1.7.5'
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    CONFIG = readYaml(file: CONFIG_FILE)
                }
            }
        }

        stage('Terraform Init & Plan') {
            when {
                expression {
                    return env.BRANCH_NAME.startsWith('feature/') || env.BRANCH_NAME == 'dev'
                }
            }
            steps {
                script {
                    def envKey = env.BRANCH_NAME.startsWith('feature/') ? 'dev' : env.BRANCH_NAME
                    def modules = CONFIG[envKey]

                    modules.each { name, config ->
                        if (config.enabled && !config.disabled) {
                            dir(config.path) {
                                withEnv(["TF_IN_AUTOMATION=true"]) {
                                    sh "terraform init"
                                    sh "terraform plan -var-file=${config.tfvars} -input=false"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression {
                    return env.BRANCH_NAME == 'stage' || env.BRANCH_NAME == 'main'
                }
            }
            steps {
                input message: "Approve Apply for ${env.BRANCH_NAME}?"
                script {
                    def modules = CONFIG[env.BRANCH_NAME]
                    modules.each { name, config ->
                        if (config.enabled && !config.disabled) {
                            dir(config.path) {
                                withEnv(["TF_IN_AUTOMATION=true"]) {
                                    sh "terraform init"
                                    sh "terraform apply -var-file=${config.tfvars} -auto-approve"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "Terraform pipeline failed for ${env.BRANCH_NAME}"
        }
        success {
            echo "Terraform pipeline completed successfully for ${env.BRANCH_NAME}"
        }
    }
}
