def CONFIG_FILE = 'deployment-config.yaml'


//def CONFIG_FILE = 'Mayur_project3/deployment-config.yaml'

pipeline {
    agent any

    environment {
        TF_VERSION = '1.7.5'
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.BRANCH_NAME}"]],
                        userRemoteConfigs: [[url: 'https://github.com/MayurChaudhari1172/Mayur_project3.git']],
                        extensions: [[$class: 'CleanCheckout']]
                    ])

                    echo "üîç Branch detected: ${env.BRANCH_NAME}"

                    if (!fileExists(CONFIG_FILE)) {
                        error "‚ùå Config file not found at ${CONFIG_FILE}"
                    }

                    CONFIG = readYaml(file: CONFIG_FILE)
                }
            }
        }

        stage('Terraform Init & Plan') {
            when {
                expression {
                    return env.BRANCH_NAME?.startsWith('feature')
                }
            }
            steps {
                script {
                    echo "üöÄ Running Terraform Init & Plan for feature branch: ${env.BRANCH_NAME}"

                    def modules = CONFIG[env.BRANCH_NAME]?.modules
                    if (!modules) {
                        error "‚ùå No 'modules' section found under ${env.BRANCH_NAME} in config"
                    }

                    modules.each { name, config ->
                        if (config.enabled && !config.disabled) {
                            echo "‚ñ∂ Running plan for: ${name}"
                            dir(config.path) {
                                withEnv(["TF_IN_AUTOMATION=true"]) {
                                    sh "terraform init"
                                    sh "echo 'üìÅ Current dir:' && pwd && ls -l"
                                    if (config.containsKey('tfvars') && config.tfvars) {
                                        sh "echo 'üîç Looking for tfvars at: ${config.tfvars}'"
                                        if (!fileExists(config.tfvars)) {
                                            error "‚ùå tfvars file '${config.tfvars}' not found in ${config.path}"
                                        }
                                        sh "terraform plan -var-file=${config.tfvars} -input=false"
                                    } else {
                                        sh "terraform plan -input=false"
                                    }
                                }
                            }
                        } else {
                            echo "‚è© Skipping module '${name}' - not enabled"
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression {
                    return ['dev', 'stage', 'main'].contains(env.BRANCH_NAME)
                }
            }
            steps {
                script {
                    echo "üöÄ Running Terraform Apply for branch: ${env.BRANCH_NAME}"

                    if (['stage', 'main'].contains(env.BRANCH_NAME)) {
                        input message: "üîí Approve Apply for ${env.BRANCH_NAME}?"
                    }

                    def modules = CONFIG[env.BRANCH_NAME]?.modules
                    if (!modules) {
                        error "‚ùå No 'modules' section found under ${env.BRANCH_NAME} in config"
                    }

                    modules.each { name, config ->
                        if (config.enabled && !config.disabled) {
                            echo "‚ñ∂ Running apply for: ${name}"
                            dir(config.path) {
                                withEnv(["TF_IN_AUTOMATION=true"]) {
                                    sh "terraform init"
                                    sh "echo 'üìÅ Current dir:' && pwd && ls -l"
                                    if (config.containsKey('tfvars') && config.tfvars) {
                                        sh "echo 'üîç Looking for tfvars at: ${config.tfvars}'"
                                        if (!fileExists(config.tfvars)) {
                                            error "‚ùå tfvars file '${config.tfvars}' not found in ${config.path}"
                                        }
                                        sh "terraform apply -var-file=${config.tfvars} -auto-approve"
                                    } else {
                                        sh "terraform apply -auto-approve"
                                    }
                                }
                            }
                        } else {
                            echo "‚è© Skipping module '${name}' - not enabled"
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Terraform pipeline failed for ${env.BRANCH_NAME}"
        }
        success {
            echo "‚úÖ Terraform pipeline completed successfully for ${env.BRANCH_NAME}"
        }
    }
}
